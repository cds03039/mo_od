<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="kr.co.mood.Payment.DAO.AdminPaymentDAO">

	<select id="getCategoryChart1"
		resultType="kr.co.mood.Payment.VO.AdminChartVO">
		select product.pro_name as 'serialNumber',
			sum(orderProduct.count) as 'payCount'
		from product
		inner join orderProduct 
			on orderProduct.pro_number = product.pro_number
		inner join payment
			on payment.orderid = orderProduct.orderid
		where (payment.Success = '결제 완료' or payment.Success = '구매 확정')
		group by product.pro_name
		order by payCount desc
		limit 0, 5
	</select>

	<select id="getCategoryChart2"
		resultType="kr.co.mood.Payment.VO.AdminChartVO">
		select pro_name as 'serialNumber',
		pro_bucketcount as
		'bucketCount'
		from product
		where pro_bucketcount > 0
		order by
		pro_bucketcount desc
		limit 0, 5
	</select>

	<select id="getCategoryChart3"
		resultType="kr.co.mood.Payment.VO.AdminChartVO">
         <![CDATA[
          SELECT  CASE DAYOFWEEK(SuccessTime) 
         		WHEN 2 THEN '월요일' 
         		WHEN 3 THEN '화요일' 
         		WHEN 4 THEN '수요일' 
         		WHEN 5 THEN '목요일' 
         		WHEN 6 THEN '금요일' 
         		WHEN 7 THEN '토요일' 
         		WHEN 1 THEN '일요일' 
         		ELSE '유효한 날짜가 아닙니다.' END as week, 
         	SUM(Amount) as sales 
         	from payment 
         	where (Success = '결제 완료' or payment.Success = '구매 확정')
					and SuccessTime like concat(#{year}, '%')
			group by DAYOFWEEK(SuccessTime)
         	order by DAYOFWEEK(SuccessTime)
         	]]>
	</select>


	<select id="getCategoryChart4"
		resultType="kr.co.mood.Payment.VO.AdminChartVO">
		<![CDATA[
		select member.gender, member.age, product.pro_categoryserial as 'categorySerial', sum(orderProduct.count) as 'productCount'
			from moodjoin as member
		inner join moodorder
			on moodorder.userNo = member.no
		inner join orderProduct
			on orderProduct.orderId = moodorder.orderId
		inner join payment
			on payment.orderid = orderProduct.orderId
		inner join product
			on product.pro_number = orderProduct.pro_number
		inner join (select product.pro_categoryserial as categoryserial, sum(orderProduct.count) 
					from orderProduct
					inner join product
						on product.pro_number = orderProduct.pro_number
					inner join payment
						on payment.orderid = orderProduct.orderId
					group by product.pro_categoryserial
					limit 0, 5) as category
			on category.categoryserial = product.pro_categoryserial	
		where (payment.Success = '결제 완료' or payment.Success = '구매 확정')
		and payment.SuccessTime like concat('%' ,#{year}, '%')
		group by member.gender,product.pro_categoryserial, member.age
		order by productCount desc

			]]>
	</select>

	<select id="adminPaymentMemberList"
		resultType="kr.co.mood.Payment.VO.AdminPaymentVO">
		select moodorder.orderid as 'orderNo',
		moodorder.address as 'address',
		member.name as 'name',
		member.phone as 'phone',
		moodorder.price as
		'amount',
		payment.SuccessTime as 'payDate'
		from moodorder
		inner join
		moodjoin as member
		on member.no = moodorder.userNo
		inner join payment
		on
		payment.orderid = moodorder.orderid
		where (payment.Success = '결제 완료' or payment.Success = '구매 확정')
		group by orderNo
		order by orderNo desc
		<if test="endNo != 0">
			limit #{startNo}, #{endNo}
		</if>

	</select>


	<select id="adminPaymentSearchingList"
		parameterType="kr.co.mood.module.ModuleVO"
		resultType="kr.co.mood.Payment.VO.AdminPaymentVO">
		select moodorder.orderid as 'orderNo',
		moodorder.address as 'address',
		member.name as 'name',
		member.phone as 'phone',
		moodorder.price as
		'amount',
		payment.SuccessTime as 'payDate'
		from moodorder
		inner join
		moodjoin as member
		on member.no = moodorder.userNo
		inner join payment
		on
		payment.orderid = moodorder.orderid
		where (payment.Success = '결제 완료' or payment.Success = '구매 확정')
		<if test="searchName != null">
			and member.name like concat('%', #{searchName}, '%')
		</if>
		<if test="orderNo != 0">
			and moodorder.orderid = #{orderNo}
		</if>
		<if test="phone != null">
			and member.phone like concat('%', #{phone}, '%')
		</if>
		<if test="date != null">
			and payment.SuccessTime like concat('%', #{date}, '%')
		</if>
		group by orderNo
		order by orderNo desc
		<if test="endNo > 0">
			limit #{startNo}, #{endNo}
		</if>
	</select>

	<select id="adminPaymentList"
		resultType="kr.co.mood.Payment.VO.AdminPaymentVO">
		select orderProduct.orderid as'orderNo',
			(orderProduct.price/orderProduct.count) as 'price',
			orderProduct.count as 'productCount',
			product.pro_serialnumber as 'productNo',
			product.pro_name as 'productName'
		from orderProduct
		inner join product
			on product.pro_number = orderProduct.pro_number
		order by orderNo desc
	</select>


	<select id="adminPaymentDetail" resultType="kr.co.mood.Payment.VO.AdminPaymentVO">
		select orderProduct.orderid as'orderNo',
			(orderProduct.price/orderProduct.count) as 'price',
			orderProduct.count as 'productCount',
			product.pro_serialnumber as 'productNo',
			product.pro_name as 'productName',
			moodorder.address as 'address',
			member.name as 'name',
			member.phone as 'phone',
			payment.SuccessTime as 'payDate',
			moodorder.price as 'amount'
		from orderProduct
		inner join product
			on product.pro_number = orderProduct.pro_number
		inner join moodorder
			on orderProduct.orderid = moodorder.orderid
		inner join moodjoin as member
			on member.no = moodorder.userNo
		inner join payment
			on payment.orderid = moodorder.orderid
		where orderProduct.orderid = #{no}
		group by product.pro_serialnumber
	</select>

	<select id="adminPaymentCancel"
		resultType="kr.co.mood.Payment.VO.KakaoPayApprovalVO">
		select payment.tid as 'tid', payment.orderId as 'orderId', orders.price as 'price'
		from
		payment
		inner join moodorder as orders
		on payment.orderid =
		orders.orderid
		where orders.orderid = #{orderid} 
			and	(payment.Success = '결제 완료'
			or payment.Success = '구매 확정')
		group by payment.tid
	</select>

	<update id="updateAddress" parameterType="kr.co.mood.Payment.VO.AdminPaymentVO">
		update moodorder set address = #{address} where orderId = #{orderNo};
	</update>


</mapper>


